/**
@defgroup timing_pal Timing - Peripheral Abstraction Layer (TIMING PAL)
@brief The S32 SDK provides a Peripheral Abstraction Layer for timer modules of S32 SDK devices.
<p>
  The TIMING PAL driver allows to generate period event. It was designed to be portable across all
  platforms and IPs which support LPIT, PIT, LPTMR, FTM, STM.
</p>

  ## How to integrate TIMING PAL in your application ##
<p>
  Unlike the other drivers, TIMING PAL modules need to include a configuration
  file named timing_pal_cfg.h, which allows the user to specify which IPs are used.
  The following code example shows how to configure one instance for each
  available TIMING IPs.
</p>

 @code
 #ifndef TIMING_PAL_CFG_H
 #define TIMING_PAL_CFG_H

 /* Define which IP instance will be used in current project */
 #define TIMING_OVER_LPIT
 #define TIMING_OVER_FTM
 #define TIMING_OVER_LPTMR

 #endif /* TIMING_PAL_CFG_H */
 @endcode

 The following table contains the matching between platforms and available IPs
    IP/MCU     |S32K116|S32K118|S32K142|S32K144|S32K146|S32K148|S32K142W|S32K144W|S32V234|S32R274|S32R372|MPC5748G|MPC5746C|MPC5744P|
 -------------:|:-----:|:-----:|:-----:|:-----:|:-----:|:-----:|:------:|:------:|:-----:|:-----:|:-----:|:------:|:-------|:-------|
 LPIT_TIMING   |  YES  |  YES  |  YES  |  YES  |  YES  |  YES  |  YES   |  YES   |   NO  |  NO   |  NO   |   NO   |   NO   |   NO   |
 LPTMR_TIMING  |  YES  |  YES  |  YES  |  YES  |  YES  |  YES  |  YES   |  YES   |   NO  |  NO   |  NO   |   NO   |   NO   |   NO   |
 FTM_TIMING    |  YES  |  YES  |  YES  |  YES  |  YES  |  YES  |  YES   |  YES   |  YES  |  NO   |  NO   |   NO   |   NO   |   NO   |
 PIT_TIMING    |  NO   |  NO   |  NO   |  NO   |  NO   |  NO   |   NO   |   NO   |  YES  |  YES  |  YES  |  YES   |  YES   |  YES   |
 STM_TIMING    |  NO   |  NO   |  NO   |  NO   |  NO   |  NO   |   NO   |   NO   |  YES  |  YES  |  YES  |  YES   |  YES   |  YES   |
<p>

  ## Features ##
   - Start timer channel counting with period in ticks function
   - Generate one-shot or continuous notification(Event)
   - Get elapsed time and remaining time functions
   - Get tick resolution in engineering units (nanosecond, microsecond or millisecond)

  ## Functionality ##

  ### Initialization ###
<p>
  In order to use the TIMING PAL driver it must be first initialized, using TIMING_Init() function.
  Once initialized, it should be de-initialized before initialized again for the same TIMING module instance,
  using TIMING_Deinit(). The initialization function does the following operations:
    - sets the clock source, clock prescaler (except LPIT, PIT_TIMING)
    - sets notification type and callback function of timer channel
  Different TIMING modules instances can function independently of each other.
</p>

  ### Start/Stop a timer channel counting with new period ###
<p>
  After initialization, a timer channel can be started by calling TIMING_StartChannel function.
  The input period unit is ticks, the max value of period depends on which timer is used for timing.
  The TIMING_StartChannel function can be called consecutively, it starts new period immediately but in case LPIT, PIT_TIMING
  when timer channel is running, to abort the current timer channel period and start a timer channel period with a
  new value, the timer channel must be stopped and started again. A timer channel can be stop by calling TIMING_StopChannel function.
</p>

  ### Get elapsed and remaining time ###
<p>
  When a timer channel is running, the elapsed and remaining timer can be got by calling TIMING_GetElapsed and TIMING_GetRemaining
  function. The elapsed and remaining time in nanosecond, microsecond or millisecond is the result of this function
  multiplies by the result of the TIMING_GetResolution.
</p>

  ## Important Notes ##
<p>
  - Before using the TIMING PAL driver the module clock must be configured. Refer to Clock Manager for clock configuration.
  - The driver enables the interrupts for the corresponding TIMING module, but any interrupt priority
    must be done by the application
  - When the vector table is not in ram (__flash_vector_table__ = 1):
    + INT_SYS_InstallHandler shall check if the function pointer provided as parameter for the new handler is already present in the vector table for the given IRQ number.
    + The user will be required to manually add the correct handlers in the startup files
  - The board specific configurations must be done prior to driver calls
  - Some features are not available for all TIMING IPs and incorrect parameters will be handled by DEV_ASSERT
  - Because of the driver code limit, when use FTM_TIMING or STM_TIMING the executing time of interrupt handler is about 4 microseconds,
    so the erroneous period is about 4 microsecond, should configure period enough to skip this erroneous period.
  - In MPC574xG and MPC574xC devices, STM module has Errata e10200. If STM clock source is configured to use the FXOSC clock for the case
    application software reads the STM Count register(STM_CNT) while the counter is running, the value returned may be incorrect.
    Note the default clock source for the STM is the FS80 (divided system clock) and this configuration is working properly.
    Consequently the value returned by the function STM_DRV_GetCounterValue() may be incorrect when clock source is set to FXOSC option.
    Thus, this issue impacts to the functions that call STM_DRV_GetCounterValue() function:
        - TIMING_GetElapsed
        - TIMING_GetRemaining
        - TIMING_StartChannel only in case the timer is already started
    This issue should be taken care when using TMING over STM.
</p>
  </p>
 ## Example code ##
 @code
  /* The timer channel number */
  #define TIMER_CHANNEL 0U

  /* The timer channel period by nanosecond */
  #define TIMER_PERIOD_NANO 1000000000U

  /* Counting variable */
  uint32_t count = 0;

  /* Callback function */
  void My_Callback(void * data)
  {
      (void)data;
      count = count + 1;
  }

  /* Configure timer channel */
  timer_chan_config_t timing_pal1_channelArray[] =
  {
    {
        TIMER_CHANNEL,
        TIMER_CHAN_TYPE_CONTINUOUS,
        My_Callback,
        NULL
    }
  };

  /* Configure FTM clock source */
  extension_ftm_for_timer_t timing_pal1_ftmExtention =
  {
    FTM_CLOCK_SOURCE_FIXEDCLK,
    FTM_CLOCK_DIVID_BY_1,
    0xFFFF
  };

  /* Configure TIMING instance */
  timer_config_t timing_pal1_InitConfig =
  {
      timing_pal1_channelArray,
      1,
      &timing_pal1_ftmExtention
  };

  /* TIMING instance number structure */
  timing_instance_t instance =
  {
      TIMING_INST_TYPE_LPIT,
      0U
  };

int main(void)
{
  uint64_t resolution;
  uint32_t elapsedTime;

  /* Initialize TIMING */
  TIMING_Init(&instance, &timing_pal1_InitConfig);

  /* Get tick resolution in nanosecond */
  TIMING_GetResolution(&instance, TIMER_RESOLUTION_TYPE_NANOSECOND, &resolution);

  /* Start channel counting with period is 1 second */
  TIMING_StartChannel(&instance, TIMER_CHANNEL, (TIMER_PERIOD_NANO / resolution));
   ....
  /* Get elapsed time in ticks */
  elapsedTime = TIMING_GetElapsed(&instance, TIMER_CHANNEL);

  /* Get elapsed time in nanosecond */
  elapsedTime = elapsedTime * resolution;

  /* De-initialize TIMING */
  TIMING_Deinit(&instance);
}
 @endcode

## Integration guideline ##

### Compilation units ###

The following files need to be compiled in the project:
\verbatim
${S32SDK_PATH}\platform\pal\src\timing\timing_pal.c
${S32SDK_PATH}\platform\pal\src\timing\timing_irq.c
\endverbatim

### Include path ###

The following paths need to be added to the include path of the toolchain:
\verbatim
${S32SDK_PATH}\platform\pal\inc\
\endverbatim

### Compile symbols ###

No special symbols are required for this component

### Dependencies ###
\b Common:
\ref clock_manager
\ref interrupt_manager
<p>
\b S32K1xx:
\ref lpit
\ref lptmr
\ref ftm
</p>
<p>
\b MPC574x and \b S32Rx7x:
\ref pit
\ref stm
</p>

@}*/
