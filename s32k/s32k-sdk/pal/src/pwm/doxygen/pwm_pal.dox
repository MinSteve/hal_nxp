/*!

@defgroup pwm_pal  Pulse-width modulation - Peripheral Abstraction Layer (PWM PAL)
@brief The S32 SDK provides a Peripheral Abstraction Layer for the PWM mode.
<p>
 The PWM PAL driver allows to generate PWM signals. It was designed to be portable across all
 platforms and IPs which support PWM features.
</p>

 ## How to integrate PWM in your application ##
<p>
  Unlike the other drivers, PWM PAL modules need to include a configuration
  file named pwm_pal_cfg.h, which allows the user to specify which IPSs are used
  and how many resources are allocated for each of them (state structures).
  The following code example shows how to configure one instance for each
  available PWM IP.

 @code
 #ifndef PWM_PAL_cfg_H
 #define PWM_PAL_cfg_H

 /* Define which IP instance will be used in current project */
 #define PWM_OVER_FTM
 #define PWM_OVER_EMIOS
 #define PWM_OVER_ETIMER

 /* Define the resources necessary for current project */
 #define NO_OF_FTM_INSTS_FOR_PWM       1U
 #define NO_OF_EMIOS_INSTS_FOR_PWM     1U
 #define NO_OF_ETIMER_INSTS_FOR_PWM    1U
 #endif /* PWM_PAL_cfg_H */
 @endcode

 The following table contains the matching between platforms and available IPs

 IP/MCU|S32K116|S32K118|S32K142|S32K144|S32K142W|S32K144W|S32K146|S32K148|MPC5748G|MPC5746C|MPC5744P|S32R274|S32R372|
 -----:|:-----:|:-----:|:-----:|:-----:|:-----: |:-----: |:-----:|:-----:|:------:|:------:|:------:|:-----:|:-----:|
 FTM   |  YES  |  YES  |  YES  |  YES  |  YES   |  YES   |  YES  |  YES  |   NO   |   NO   |   NO   |   NO  |   NO  |
 eMIOS |  NO   |  NO   |  NO   |  NO   |  NO    |  NO    |  NO   |  NO   |   YES  |   YES  |   NO   |   NO  |   NO  |
 ETIMER|  NO   |  NO   |  NO   |  NO   |  NO    |  NO    |  NO   |  NO   |   NO   |   NO   |   YES  |  YES  |  YES  |
<p>
<p>
  In order to use the PWM PAL driver it must be first initialized it
  using function PWM_Init(). Once initialized, it cannot
  be initialized again for the same PWM module instance until it is de-initialized, using
  PWM_Deinit(). Different PWM module instances can work independently
  of each other.
</p>

<p>
  After initialization the duty cycle and pwm period can be updated with these functions: PWM_UpdateDuty() and
  PWM_UpdatePeriod(). The measurement unit for duty and period is clock ticks, so the application should be aware about
  the clock frequency of the timebase used by PWM channel.
<p>

<p>
  Due to hardware limitation period changing for a specific channel can change the period for other
  channels if they share the same timebase. Also, for FTM all channels must have the same period and type.
<p>

 ## Important Notes ##
<p>
  - The driver enables the interrupts for the corresponding module, but any interrupt priority
  setting must be done by the application.
  - Due to different hardware features is necessary to use different timebase configuration on each platform and some features are available only on some peripherals.
  To be sure that your applications doesn't try to use unsupported features check return status of called functions and activate DEV_ERROR_DETECT.
</p>

 ## Basic code sequence ##
 1. Initialize PWM_PAL instance
 @code
 PWM_Init(&pwm_pal1Instance, &pwm_pal1Config);
 @endcode

 2. Update duty cycle
 @code
 PWM_UpdateDuty(&pwm_pal1Instance, 0, dutyCycle);
 @endcode

 3. Update period
 @code
 PWM_UpdatePeriod(&pwm_pal1Instance, 0, period);
 @endcode

 4. De-initialize PWM_PAL instance
 @code
 PWM_Deinit(&pwm_pal1Instance);
 @endcode

## Hardware Limitations ##

### eTimer ###
eTimer cannot generate 0% or 100% duty cycles. At least one clock tick will have inverted polarity.

 ## Integration guideline ##

 ### Compilation units ###

 The following files need to be compiled in the project:
 \verbatim
${S32SDK_PATH}\platform\pal\src\pwm\pwm_pal.c
\endverbatim

 Additionally, it is required to compile also the .c files from the dependencies listed for each ADC PAL type (please see Dependencies subsection below).

 ### Include path ###

 The following paths need to be added to the include path of the toolchain:
 \verbatim
${S32SDK_PATH}\platform\pal\inc\
${S32SDK_PATH}\platform\drivers\inc\
\endverbatim
 
 \n An additional file, named <i>pwm_pal_cfg.h</i>, must be created by the user and added to one of the include paths.
 The user has to add to the file the definitions of preprocessor symbols according to the PWM PAL type used. These symbols are specified in the next subsection. \n
 When using the S32 SDK configuration tool the file is generated by the configurator.

 \n The pal type PWM_OVER_FTM also requires:
 \verbatim
${S32SDK_PATH}\platform\drivers\src\ftm\
\endverbatim

 ### Compile symbols ###

 Define for selecting one of the PWM PAL type to be used:
 \verbatim
PWM_OVER_FTM
PWM_OVER_EMIOS
PWM_OVER_ETIMER
\endverbatim

 ### Dependencies ###

 - The pal type PWM_OVER_FTM also depends on: \n
 \ref ftm_pwm_driver\n
 \ref ftm \n \n

 - The pal type PWM_OVER_EMIOS also depends on: \n
 \ref mc_emios_driver \n
 \ref pwm_emios_driver \n \n

 - The pal type PWM_OVER_ETIMER also depends on: \n
 \ref etimer_drv \n \n
*/