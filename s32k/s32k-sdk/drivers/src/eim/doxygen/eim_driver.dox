/**
@defgroup eim Error Injection Module (EIM)
@brief The S32 SDK provides Peripheral Drivers for the Error Injection Module (EIM) of S32 MCU
@details
<p>
    The Error Injection Module (EIM) is mainly used for diagnostic purposes. It provides a method
    for diagnostic coverage of the peripheral memories and offers support for inducing single-bit and multi-bit
    inversions on read data when accessing peripheral RAMs.
</p>
<p>
    Injecting faults on memory accesses can be used to exercise the SEC-DED ECC function of the related system.
    Each EIM channel n corresponds to a source of potential memory error events.
</p>

<p>
The following table shows the channel assignments of the module:

|   EIM channel n |      S32K14x     |      S32K14xW    |       S32K11x      |     S32Rx7x       |     MPC5746R      |     MPC5777C      |                S32V23x             |
|:---------------:|:----------------:|:----------------:|:------------------:|:-----------------:|:-----------------:|:-----------------:|:----------------------------------:|
|        0        |      SRAM_L      |      SRAM_L      |       SRAM_U       |    DMA TCD RAM    |    DMA TCD RAM    |      PRAMC_0      |   Cortex-M4 TCM upper (bits31-0)   |
|        1        |      SRAM_U      |      SRAM_U      |       Reserved     |     Reserved      |     Reserved      |      PRAMC_1      |   Cortex-M4 TCM upper (bits63-32)  |
|        2        |      Reserved    |      Reserved    |       Reserved     |     Reserved      |     Reserved      |      FEC MIB      |   Cortex-M4 TCM lower (bits31-0)   |
|        3        |      Reserved    |      Reserved    |       Reserved     |     Reserved      |     Reserved      |      FEC RIF      |   Cortex-M4 TCM lower (bits63-32)  |
|        4        |      Reserved    |      Reserved    |       Reserved     |     Reserved      |     Reserved      |   eDMA_0 TCD RAM  |   Cortex-M4 Code Cache Tag Way0    |
|        5        |      Reserved    |      Reserved    |       Reserved     |     Reserved      |     Reserved      |   eDMA_1 TCD RAM  |   Cortex-M4 Code Cache Tag Way1    |
|        6        |      Reserved    |      Reserved    |       Reserved     |     Reserved      |     Reserved      |     Reserved      |   Cortex-M4 Code Cache Data Way0   |
|        7        |      Reserved    |      Reserved    |       Reserved     |     Reserved      |     Reserved      |     Reserved      |   Cortex-M4 Code Cache Data Way1   |
|        8        |      Reserved    |      Reserved    |       Reserved     |     Reserved      |     Reserved      |     Reserved      |   Cortex-M4 System Cache Tag Way0  |
|        9        |      Reserved    |      Reserved    |       Reserved     |     Reserved      |     Reserved      |     Reserved      |   Cortex-M4 System Cache Tag Way1  |
|       10        |      Reserved    |      Reserved    |       Reserved     |     Reserved      |     Reserved      |     Reserved      |   Cortex-M4 System Cache Data Way0 |
|       11        |      Reserved    |      Reserved    |       Reserved     |     Reserved      |     Reserved      |     Reserved      |   Cortex-M4 System Cache Data Way1 |
|       12        |      Reserved    |      Reserved    |       Reserved     |     Reserved      |     Reserved      |     Reserved      |             DMA TCD RAM            |

@n
</p>

/*!
## Integration guideline ##

### Compilation units ###

The following files need to be compiled in the project:
\verbatim
${S32SDK_PATH}\platform\drivers\src\eim\eim_driver.c
${S32SDK_PATH}\platform\drivers\src\eim\eim_hw_access.c
\endverbatim

### Include path ###

The following paths need to be added to the include path of the toolchain:
\verbatim
${S32SDK_PATH}\platform\drivers\inc\
\endverbatim

### Compile symbols ###

No special symbols are required for this component

### Dependencies ###

No special dependencies are required for this component

 */

/*!
@n
### Important Note: ###
1. Make sure that STACK memory is located in RAM different than where EIM will inject a non-correctable error.@n
2. For single bit error generation, flip only one bit out of DATA_MASK or CHKBIT_MASK bit-fields in EIM control registers.@n
3. For Double bit error generation, flip only two bits out of DATA_MASK or CHKBIT_MASK bit-fields in EIM control registers.@n
4. If more than 2 bits are flipped that there is no guarantee in design that what type of error get generated.@n
5. When generating double bit error or more than 2 bits error:
    - S32K11x:
        After injecting the error, the program jumps to HardFault_Handler(). User needs to cancel the HardFault_Handler() by disabling the EIM module inside the HardFault_Handler() function. Example shown below:
        HardFault_Handler()
        {
            EIM_DRV_Deinit(INST_EIM1);
        }
    - S32Rx7x
         An uncorrectable ECC error occurs on an access generated by the DMA only. If a CPU access to the TCD causes an uncorrectable ECC error,
         that access will receive a bus error response.
6. When using double bit error generation on S32K11x, user needs to define one region called ram_low then move the stack and m_interrupts to
that region, otherwise the module can't be enabled because the RAM ECC mechanism can only correct one single error.@n
*/

/*!
@addtogroup eim_drv
@ingroup eim

# Basic Operations of EIM

1. To initialize EIM, call EIM_DRV_Init() with an user channel configuration array.
    In the following code, EIM is initialized with default settings (after reset) for
    check-bit mask and data mask and both channels is enabled.@n
~~~~~{.c}
1.1 With instance S32K14x
    #define INST_EIM1 (0U)
    /*! The number of configured channels */
    #define EIM_CHANNEL_COUNT0 (2U)
    /* Configuration structure array */
    eim_user_channel_config_t userChannelConfigArr[] =
    {
        /* Configuration channel 0 */
        {
            .channel = 0x0U,
            .checkBitMask = 0x00U,
            .dataMask = 0x00U,
            .enable = true
        },
        /* Configuration channel 1 */
        {
            .channel = 0x1U,
            .checkBitMask = 0x00U,
            .dataMask = 0x00U,
            .enable = true
        }
    };
1.2 With instance S32K11x
    #define INST_EIM1 (0U)
    /*! The number of configured channels */
    #define EIM_CHANNEL_COUNT0 (1U)
    /* Configuration structure array */
    eim_user_channel_config_t userChannelConfigArr[] =
    {
        /* Configuration channel 0 */
        {
            .channel = 0x0U,
            .checkBitMask = 0x01U,
            .dataMask = 0x00U,
            .enable = true
        },
    };
1.3 With instance S32Rx7x
    #define INST_EIM1 (0U)
    /*! The number of configured channels */
    #define EIM_CHANNEL_COUNT0 (1U)
    /* Configuration structure array */
    eim_user_channel_config_t userChannelConfigArr[] =
    {
        /* Configuration channel 0 */
        {
            .channel = 0x0U,
            .checkBitMask = 0x01U,
            .dataMask = 0x00U,
            .dataMask1= 0x00U,
            .enable = true
        },
    };
    /* Initialize the EIM instance 0 with configured channel number of 2 and userChannelConfigArr */
    EIM_DRV_Init(INST_EIM1, EIM_CHANNEL_COUNT0 , userChannelConfigArr);
~~~~~

2. To get the default configuration (data mask, check-bit mask and enable status)
    of a channel in EIM, just call EIM_DRV_GetDefaultConfig(). Make sure that the operation
    is not execute in target RAM where EIM inject the error@n
~~~~~{.c}
    eim_user_channel_config_t channelConfig;

    /* Get default configuration of EIM channel 1*/
    EIM_DRV_GetDefaultConfig(1U, &channelConfig);
~~~~~

3. To de-initialize EIM, just call the EIM_DRV_Deinit() function.
    This function sets all registers to reset values and disables EIM.@n
~~~~~{.c}
    /* De-initializes the EIM module */
    EIM_DRV_Deinit(INST_EIM1);
~~~~~

*/
