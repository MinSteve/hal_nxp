/*
** ###################################################################
**     Processor:           S32K116 with 17 KB SRAM
**     Compiler:            Windriver Diab Compiler
**
**     Abstract:
**         Linker file for the Windriver Diab Compiler
**
**     Copyright (c) 2015-2016 Freescale Semiconductor, Inc.
**     Copyright 2017-2018 NXP
**     All rights reserved.
**
**     NXP Confidential. This software is owned or controlled by NXP and may only be
**     used strictly in accordance with the applicable license terms. By expressly
**     accepting such terms or by downloading, installing, activating and/or otherwise
**     using the software, you are agreeing that you have read, and that you agree to
**     comply with and are bound by, such license terms. If you do not agree to be
**     bound by the applicable license terms, then you may not retain, install,
**     activate or otherwise use the software. The production use license in
**     Section 2.3 is expressly granted for this software.
**
**     http:                 www.nxp.com
**
** ###################################################################
*/

HEAP_SIZE  = 0x00000200;
STACK_SIZE = 0x00000200;
M_VECTOR_RAM_SIZE = 0x000000C0;

/* Specify the memory areas */
MEMORY
{
  /* SRAM_L */
  m_custom              (RW)  : ORIGIN = 0x1FFFFC00, LENGTH = 0x00000400
  /* SRAM_U */
  m_interrupts          (RX)  : ORIGIN = 0x20000000, LENGTH = 0x000000C0
  m_text                (RX)  : ORIGIN = 0x200000C0, LENGTH = 0x00002000
  m_data                (RW)  : ORIGIN = 0x200020C0, LENGTH = 0x00001740
}

/* Define output sections */
SECTIONS
{
    /* The startup code goes first into internal RAM */
    GROUP ALIGN(4) : {
        .interrupts : {
            __interrupts_start__ = .;
            KEEP(*(.isr_vector))
            __interrupts_end__ = .;
        }
    } > m_interrupts

    /* Collect all code sections from all input files to make a single output
     * .text section and locate it in "m_text" memory
     */
    GROUP ALIGN(4) : {
        .text (TEXT) : {
            *(.text)        /* .text sections (code) */
            *(.rodata)      /* .rodata sections (constants, strings, etc.) */
        }

        /* Section for storing functions that needs to execute from RAM */
        .code_ram (TEXT) ALIGN(4): {
            __CODE_RAM = .;
            __code_ram_start__ = .;
            *(.code_ram)               /* Custom section for storing code in RAM */
            __code_ram_end__ = .;
        }
        __CODE_ROM = .;            /* Symbol is used by start-up for data initialization. */
        __CODE_END = .;            /* No copy */

        __DATA_ROM = .;
    } > m_text
    
    GROUP : {
	    /* Custom Section Block that can be used to place data at absolute address. */
        /* Use #pragma section to place data here. */
		/* Use this section only when MTB (Micro Trace Buffer) is not used, because MTB uses the same RAM area, as described in S32K Reference Manual. */
        .customSectionBlock : {
		    __customSectionStart = .;
            __customSection_start__ = .;
            KEEP(*(.customSection))  /* Keep section even if not referenced. */
            __customSection_end__ = .;
            __CUSTOM_ROM = .;
            __CUSTOM_END = .;
        }
	} > m_custom
	
    GROUP : {
        /* With the COPYTABLE specification on the GROUP,
         * .data section is placed at the .text2 section in "m_text"
	     * (the "physical" address) but will be at the beginning of
	     * "m_data" (the "logical" address) at run time.
	     * The linker links for "logical" address in "m_data".
         * .bss do not occupy any space in "m_text" and
         * it is linked for "logical" address in "m_data".
         */

        .data (DATA) : {
            . = ALIGN(4);
            __DATA_RAM = .;
            __data_start__ = .;
            *(.data)
            . = ALIGN(4);
            __data_end__ = .;
            __DATA_END = __DATA_ROM;
        }

        /* Allocate uninitialized sections. */
        __BSS_START = .;
        __bss_start__ = .;
        .bss (BSS) : {}
        __bss_end__ = .;
        __BSS_END = .;

        /* Any remaining space will be used as a heap. */
        __HEAP_START = .;
    } > m_data

    __StackTop   = ADDR(m_data) + SIZEOF(m_data);

    __VECTOR_TABLE = ADDR(m_interrupts);
    __VECTOR_RAM = __VECTOR_TABLE;
    __RAM_VECTOR_TABLE_SIZE = 0x0;
}

